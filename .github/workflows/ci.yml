name: Setup Sniffer with VPN

on:
  workflow_dispatch:

jobs:
  setup-sniffer-client:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install OpenVPN and SSH client
      run: |
        sudo apt-get update
        sudo apt-get install -y openvpn openssh-client sshpass

    - name: Start VPN connection
      run: |
        sudo openvpn --config $GITHUB_WORKSPACE/HamzaRauf.ovpn --daemon
        sleep 30 # Increased sleep time to ensure VPN connection is fully established

    - name: Check OpenVPN logs
      run: |
        cat /var/log/syslog | grep openvpn

    - name: Verify VPN connection
      run: |
        ifconfig # Check if VPN interface is up
        ping -c 10 172.30.205.125 # Replace with the actual IP you want to test

    - name: SSH and update packages
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        apt-get update
        EOF

    - name: SSH and install dependencies
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        apt-get install -y build-essential libcurl4-openssl-dev libfftw3-dev libgcrypt-dev libglib2.0-dev libgoogle-perftools-dev libjson-c-dev liblzma-dev liblzo2-dev default-libmysqlclient-dev libpcap-dev libpng-dev librrd-dev libsnappy-dev libssh-dev libvorbis-dev libxml2-dev unixodbc-dev unzip
        EOF
        
    - name: SSH and clone sniffer repository
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        if [ ! -d "sniffer" ]; then
          git clone https://github.com/xFlowResearch/sniffer.git
        else
          echo "Sniffer directory already exists."
        fi
        EOF
        
    - name: SSH and checkout desired commit
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        cd sniffer
        git fetch
        git checkout db858a3f
        git checkout -b version-30.8.1
        echo "Setting up sniffer in client mode"
        EOF

    - name: SSH and configure sniffer
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        cd sniffer
        ./configure
        EOF

    - name: SSH and clean sniffer build
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        cd sniffer
        make clean
        EOF

    - name: SSH and build sniffer
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        cd sniffer
        make -j7
        EOF

    - name: SSH and install sniffer
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        cd sniffer
        sudo make install
        EOF
        
    - name: SSH and install libgcrypt20-dev
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        apt-get install -y libgcrypt20-dev
        EOF

    - name: SSH and modify Makefile CXXFLAGS
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        cd sniffer
        sed -i 's/-O[0-9]/-O0/' Makefile
        EOF
        
    - name: SSH and set up launch.json
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        mkdir -p sniffer/.vscode
        cat <<EOT > sniffer/.vscode/launch.json
        {
          "version": "0.2.0",
          "configurations": [
            {
              "name": "(gdb) Launch",
              "type": "cppdbg",
              "request": "launch",
              "program": "\${workspaceFolder}/sniffer/voipmonitor",
              "args": ["--config-file=\${workspaceFolder}/sniffer/config/voipmonitor-rpb.conf","-d","\${workspaceFolder}/voipmon-result", "-R", "-r", "/home/tayyaba/Desktop/pcaps/smsoip_test1.pcap"],
              "stopAtEntry": false,
              "cwd": "\${fileDirname}",
              "environment": [],
              "externalConsole": false,
              "MIMode": "gdb",
              "setupCommands": [
                {
                  "description": "Enable pretty-printing for gdb",
                  "text": "-enable-pretty-printing",
                  "ignoreFailures": true
                },
                {
                  "description": "Set Disassembly Flavor to Intel",
                  "text": "-gdb-set disassembly-flavor intel",
                  "ignoreFailures": true
                }
              ]
            }
          ]
        }
        EOT
        EOF

    - name: SSH and Run Sniffer
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=10 root@172.30.205.125 'bash -s' <<'EOF'
        cd sniffer
        ./voipmonitor --config-file=config/voipmonitor.conf -k -c
        EOF
